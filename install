#!/usr/bin/env bash
# vim: set ts=4 sw=4 sts=0 sta et :

###
#
# Installs all dotfiles by symlinking them to this directory.
#
# Author: Roelof Roos
# License: GPL-3
#
###

dot_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

C_ERR="$( tput setaf 1 )"
C_INFO="$( tput setaf 2 )"
C_COMMENT="$( tput setaf 3 )"
C_NOTE="$( tput setaf 7 )"
C_CMD="$( tput setaf 6 )"
C_RES="$( tput sgr0 )"

echo -e "${C_NOTE}Using \"${C_COMMENT}${dot_dir}${C_NOTE}\" as base directory${C_RES}"

polybar_files=(config launch.sh)
i3_files=(bootclean.sh config screenshot)
fontconfig_files=(50-no-batang.conf)
font_files=(\
    fontawesome-pro-brands-900.otf \
    fontawesome-pro-solid-900.otf \
    fontawesome-pro-regular-400.otf \
    fontawesome-pro-light-300.otf \
)
zsh_files=(.zshrc .bash_aliases .bash_functions)
bin_files=$(find "${dot_dir}/bin/" -type f -printf '%f ')

function map_files() {
    source_dir="$( realpath "$dot_dir/$1" )"
    target_dir="${HOME}/$2"
    shift 2

    echo -e "\n${C_COMMENT}Installing ${C_INFO}$( basename "${source_dir}" )${C_COMMENT}...${C_RES}"

    if [ ! -d "$target_dir" ]; then
        echo "  ${C_NOTE}Creating directory ${C_INFO}${target_dir}${C_RES}"
        echo "+ ${C_CMD}mkdir \"$target_dir\"${C_RES}"
        mkdir "$target_dir"
    fi

    target_dir="$( realpath "${target_dir}" )"

    for file in $*
    do
        echo -e "  ${C_NOTE}Evaluating ${C_INFO}${file}${C_NOTE}...${C_RES}"
        target="${target_dir}/$(basename "$file" )"

        # Check if file is broken symlink
        if [ -h "$target" -a ! -e "$target" ]
        then
            echo "  ${C_NOTE}File ${C_INFO}$(basename "$file")${C_NOTE} is broken symlink.${C_RES}"
            echo "    ${C_INFO}deleting...${C_RES}"
            rm "$target"
        fi

        # Check if file exists
        if [ -e "$target" ]
        then
            echo "  ${C_NOTE}File ${C_INFO}$(basename "$file")${C_NOTE} already exists, skipping.${C_RES}"
            continue
        fi

        if [ -N "$target" ]
        then
            echo "  ${C_NOTE}File ${C_INFO}$(basename "$file")${C_NOTE} already linked!${C_RES}"
            continue
        fi

        if [ ! -f "${source_dir}/${file}" ]
        then
            echo "  ${C_ERR}Source file ${C_COMMENT}$( basename "$file" )${C_ERR} not found.${C_RES}"
            exit 255
        fi

        echo "  ${C_NOTE}Linking ${C_COMMENT}${target}${C_NOTE} to ${C_INFO}${source_dir}/${file}${C_NOTE}...${C_RES}"
        echo "  + ${C_CMD}ln -s \"${source_dir}/${file}\" \"${target}\"${C_RES}"
        ln -s "${source_dir}/${file}" "${target}"
    done
}

# Create links, and optionally directories
# Polybar
map_files polybar ".config/polybar" ${polybar_files[@]}

# i3
map_files i3 ".config/i3" ${i3_files[@]}

# Redshift
map_files redshift ".config" redshift.conf

# Fontconfig and fonts
map_files fontconfig ".config/fontconfig/conf.d" ${fontconfig_files[@]}
map_files fonts ".local/share/fonts/" ${font_files[@]}

# Binary files
map_files "bin" "bin" ${bin_files[@]}

# Zsh
map_files "zsh" "." ${zsh_files[@]}

# Create some mandatory files
echo -e "${C_NOTE}Creating GitHub token storage for Polybar${C_RES}"
echo -e "+ ${C_CMD}touch \"~/.config/polybar/github.token\"${C_RES}"
touch "${HOME}/.config/polybar/github.token"

echo -e "${C_INFO}All done!${C_RES}"
